<?php

use Drupal\Component\Render\FormattableMarkup;
use Drupal\Core\Field\FieldItemListInterface;

/**
 * @file
 * Module Handle the feeds unimported report log
 * handling.
 */

/**
 * Implements hook_form_alter().
 */
function feeds_log_form_alter(&$form, &$form_state, $form_id) {
    // $feeds = \Drupal::request()->get('feeds_feed_type');
    // if(in_array($form_id,array('feeds_feed_type_form','feeds_feed_type_edit_form'))){
    //   $getFeedTypeConfig = \Drupal::configFactory()->getEditable('feeds.feed_type.'.$feeds->id());
    //   $logStatus = $getFeedTypeConfig->get('feeds_feed_type')->value;
    //   //dpm($getFeedTypeConfig);
    //   $form['basics']['feeds_log']  = [
    //       '#type'     => 'checkbox',
    //       '#title'    => t('Needs unimported records log'),
    //       '#default_value'   => 1, 
    //   ];
    // }
}

/**
 * Implements InvokeAll() Module handler.
 */
function feeds_log_unimported_record($entity, $feed){
    $violations = $entity->validate();
    if (!count($violations)) {
      return;
    }

    $errors = [];

    foreach ($violations as $violation) {
      $error = $violation->getMessage();

      // Try to add more context to the message.
      // @todo if an exception occurred because of a different bundle, add more
      // context to the message.
      $invalid_value = $violation->getInvalidValue();
      if ($invalid_value instanceof FieldItemListInterface) {
        // The invalid value is a field. Get more information about this field.
        $error = new FormattableMarkup('@name : @error', [
          '@name' => $invalid_value->getFieldDefinition()->getLabel(),
          '@error' => $error,
        ]);
      }
      else {
        $error = new FormattableMarkup('@property_name: @error', [
          '@property_name' => $violation->getPropertyPath(),
          '@error' => $error,
        ]);
      }

      $errors[] = $error;
    }
    
    $element = [
      '#theme' => 'item_list',
      '#items' => $errors,
    ];
    $label = $entity->label();
    $guid = $entity->get('feeds_item')->guid;
    $messages = [];
    $args = [
      '%label' => $label,
      '%guid' => $guid,
      '@errors' => \Drupal::service('renderer')->render($element),
    ];
    if ($guid || $guid === '0' || $guid === 0) {
      $messages[] = t('GUID %guid : @errors <br>', $args);
    }
    else {
      $messages[] = t('@errors ', $args);
    }
    $message_element = [
      '#markup' => implode("<br>", $messages),
    ];
    $msg = strip_tags($message_element['#markup'],'<li></li><ul></ul>');
    $arrFields = array(
      'fid' => (!empty($feed->id())) ? $feed->id() : '',
      'label' => (!empty($label)) ? trim($label) : '',
      'imported' => REQUEST_TIME,
      'message' => (!empty($msg)) ? trim($msg) : '',
    );
    db_insert('feeds_log')->fields($arrFields)->execute();
}

function feeds_log_delete_multiple_log($feedsEntity){
  if(count($feedsEntity) > 0){
    $arrFid = [];
    foreach($feedsEntity as $strVal){
        $arrFid[] = $strVal->fid->value;
    }
    db_delete('feeds_log')->condition('fid',$arrFid,'IN')->execute();
  }
}

function feeds_log_delete_log($feedId){
  if(!empty($feedId)){
    db_delete('feeds_log')->condition('fid',$feedId)->execute();
  }
}


