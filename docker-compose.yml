version: "3.8"

services:
  imgproxy:
    ports:
      - 9091:8080
    image: darthsim/imgproxy
    volumes:
      # imgproxy needs to share the same part of the file system that is used by the drupal container
      - ./app/shared/sites:/app/shared/sites
    restart: always
    environment:
      IMGPROXY_JPEG_PROGRESSIVE: 1
      IMGPROXY_ENABLE_WEBP_DETECTION: 1
      IMGPROXY_ENFORCE_WEBP: 1
      IMGPROXY_PNG_INTERLACED: 1
      IMGPROXY_LOCAL_FILESYSTEM_ROOT: /app/shared/
      IMGPROXY_BASE_URL: local:/// # only look at local files, therefore no URL signatures are needed

  drupal:
    stdin_open: true # docker run -i
    tty: true # docker run -t
    build:
      context: .
    ports:
      - 80:80
    environment:
      DRUPAL_DBNAME: cms
      DRUPAL_DBHOST: database
      DRUPAL_DBPORT: 5432
      DRUPAL_USERNAME: cms
      DRUPAL_PASSWORD: insecure
      DRUPAL_HASH_SALT: salt
    # links:
    #   - elasticsearch:elastic-index.service.consul
    #   - imgproxy:imgproxy
    depends_on:
      - database
      - imgproxy
      # - elasticsearch
    command:
      [
        sh -c "sleep 60 && cp /app/shared/sites/default/dev.services.yml /app/shared/sites/default/services.yml",
        sh -c "drush updb -y && drush cache-rebuild",
      ]
    volumes:
      - ./app/shared/sites:/app/shared/sites

  database:
    image: amsterdam/postgres11
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: cms
      POSTGRES_USER: cms
      POSTGRES_PASSWORD: insecure
    volumes:
      - ./db:/var/lib/postgresql/data

  elasticsearch:
    image: amsterdam/elasticsearch6
    command: elasticsearch -Ehttp.host=0.0.0.0 -Etransport.host=127.0.0.1
    ports:
      - "9200:9200"
      - "9300:9300"
    depends_on:
      - database
